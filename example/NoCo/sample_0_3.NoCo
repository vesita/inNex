node quick_sort<T> = {
    locate(ROOT)
    in (T[] array, num left, num right)
    out (T[] array)
    flow (
        pivot = array[(left + right) / 2];
        let l = left;  
        let r = right;
        if (l <= r)
        +> {if (array[l] < pivot)
                +> {l ++}
            if (array[r] > pivot)
                +> {r --}}
        -> {if (l <= r) 
                +> {swap(array, l, r)
                    l ++
                    r --}}
        => {quick_sort(array, left, r)
            quick_sort(array, l, right)}
        
    )
}

graph sort<T> = {
    locate (SELF)
    in (T[] array)
    out (T[] array)
    fore()
    post()
    flow (
        if (array.length > 1)
        +> {}
        -> {quick_sort(array, 0, array.length - 1)}
    )
}

graph listen = {
    in (string host)
    out (net.link link)
    flow (
        node listener = {
            flow (
                if (net.listen(host))
                +> {ignore(0)
                    fore.accept(auto)
                    go receiver(auto)}
                -> {time.sleep(500)}
                => {loop}
            )
            
        }
        node receiver = {
            in (net.link link)
            out (final)
            flow (
                if (link.read())
                +> {let msg = fore}
                -> {time.sleep(500)}
                => loop
            )
        }
    )
}